import { test, expect } from "@playwright/test";
import { ManufacturePage } from "../pages/ManufacturePage";


function getConversionFactor(uom: string): number {
    const unitMap: Record<string, number> = { '–∫–≥': 1000, '–ª': 1000, '—à—Ç': 1 };
    return unitMap[uom.toLowerCase()] || 1;
}

test('–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∞–Ω–∏–π', async ({ page }) => {
    test.setTimeout(120000); // 2 –º–∏–Ω—É—Ç—ã
    const manufacture = new ManufacturePage(page);

    const STORAGE = "–°–∫–ª–∞–¥ –ë–∞—Ä";
    const PRODUCT_NAME = "–ü/–§ –ø–µ—Ä—Å–∏–∫-—â–∞–≤–µ–ª—å";
    const DATE = "10.10.2025";
    const tolerance = 10;

    // 1Ô∏è –û—Ç–∫—Ä—ã–≤–∞–µ–º –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∏ —Å–æ–∑–¥–∞—ë–º –Ω–∞–∫–ª–∞–¥–Ω—É—é
    await manufacture.openList();
    await manufacture.goToCreateForm();
    await manufacture.selectInvoiceDate(DATE);
    await manufacture.selectStorage(STORAGE, "storage-id");

    // 2Ô∏è –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
    await manufacture.selectProduct(PRODUCT_NAME);

    // 3Ô∏è –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–∑ UI
    const components = await manufacture.getComponentsFromUI();
    const filteredComponents = components.filter(c => c.name !== PRODUCT_NAME);
    console.log("üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:", components);


    // 4Ô∏è –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É
    const initialData: Record<string, { amount: number; uom: string }> = {};
    for (const comp of components) {
        const data = await manufacture.getProductAmountsByStorages(comp.name);
        initialData[comp.name] = {
            amount: data.amounts[STORAGE],
            uom: data.uom
        };
    }

    // –¢–∞–∫–∂–µ –ø–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –≥–æ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    const outputData = await manufacture.getProductAmountsByStorages(PRODUCT_NAME);
    const initialOutputAmount = outputData.amounts[STORAGE];

    // 5Ô∏è –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
    await manufacture.openList();
    await manufacture.goToCreateForm();
    await manufacture.selectInvoiceDate(DATE);
    await manufacture.selectStorage(STORAGE, "storage-id");
    await manufacture.selectProduct(PRODUCT_NAME);
    await manufacture.save();

    for (const comp of filteredComponents) {
        const after = await manufacture.getProductAmountsByStorages(comp.name);
        const factor = getConversionFactor(comp.uom);
        const expectedDecrease = comp.amount * factor;
        const actualDecrease = initialData[comp.name].amount - after.amounts[STORAGE];

        console.log(`üîπ ${comp.name}: –æ–∂–∏–¥–∞–ª–æ—Å—å -${expectedDecrease}, —Ñ–∞–∫—Ç -${actualDecrease}`);

        expect(Math.abs(actualDecrease - expectedDecrease)).toBeLessThanOrEqual(tolerance);
    }

    // 7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º ‚Äî –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç —É–≤–µ–ª–∏—á–∏–ª—Å—è
    const afterOutput = await manufacture.getProductAmountsByStorages(PRODUCT_NAME);
    const actualIncrease = afterOutput.amounts[STORAGE] - initialOutputAmount;
    console.log(`‚úÖ ${PRODUCT_NAME}: –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ +${actualIncrease}`);

    expect(actualIncrease).toBeGreaterThan(0);
});
