import {Page, expect} from "@playwright/test";

export interface ManufactureComponent {
    name: string;
    amount: number;
    uom: string;
}

export class ManufacturePage {
    constructor(public page: Page) {
    }

    async openList() {
        await this.page.goto('/storage-invoices/manufacture');
        await expect(this.page.locator('nz-page-header-title')).toHaveText('–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ');
    }

    async goToCreateForm() {
        await this.page.click('span:has-text("–î–æ–±–∞–≤–∏—Ç—å")');
        await expect(this.page).toHaveURL('/storage-invoices/manufacture/new');
    }

    async selectInvoiceDate(date: string) {
        // 1. –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ data-pw, –∞ –∑–∞—Ç–µ–º –∏—â–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–π input.
        // –≠—Ç–æ —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±.
        const datePickerInput = this.page.locator('[data-pw-incoming-invoice-date]').locator('input').first();

        // 2. –í–≤–æ–¥–∏–º –¥–∞—Ç—É
        await datePickerInput.fill(date);

        // 3. –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∫–ª–∏–∫–æ–º (–¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è)
        await datePickerInput.click();

        // 4. –ñ–º—ë–º "–°–µ–π—á–∞—Å", –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –µ—Å—Ç—å
        const nowBtn = this.page.locator('.ant-picker-now-btn');
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
        if (await nowBtn.isVisible({timeout: 1000})) {
            await nowBtn.click();
        }

        // 5. –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ª–æ–∫–∞—Ç–æ—Ä Playwright –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–ö"
        // (–≠—Ç–æ –æ–±—Ö–æ–¥–∏—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–≤–µ—Ä–ª–µ—è–º–∏ Ant Design)
        const okButton = this.page.getByRole('button', {name: '–û–ö', exact: true});

        // 6. –ñ–¥–µ–º –∫–Ω–æ–ø–∫—É –∏ –∫–ª–∏–∫–∞–µ–º.
        await okButton.waitFor({state: 'visible', timeout: 5000});
        await okButton.click();

        // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–∫—Ä—ã–ª—Å—è
        await expect(this.page.locator('.ant-picker-dropdown')).toBeHidden();

        // 8. –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É
        // await expect(datePickerInput).toHaveValue(date);
    }

    async selectStorage(storageName: string, dataPwSelector: string) {
        const storageFieldContainer = this.page.locator(`[data-pw-${dataPwSelector}]`);
        const storageInput = storageFieldContainer.locator('input');

        await storageInput.click();

        // ‚è≥ –∂–¥–µ–º –ø–æ–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤–∞—Ä–∏–∞–Ω—Ç —Å –Ω—É–∂–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        const desiredItem = this.page.locator('.ant-select-item-option-content', { hasText: storageName });
        await desiredItem.waitFor({ state: 'visible', timeout: 10000 });

        await desiredItem.click();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∫–ª–∞–¥
        // await expect(storageInput).toHaveValue(storageName);
    }


    async selectProduct(productName: string) {
        // 1Ô∏è‚É£ –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
        const input = this.page.locator('bm-store-product-select input.ant-select-selection-search-input');
        await input.click();
        await input.fill(productName);

        // 2Ô∏è‚É£ –ñ–¥–µ–º –∏ –≤—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        const option = this.page.locator('nz-option-item', { hasText: productName }).first();
        await expect(option).toBeVisible({ timeout: 5000 });
        await option.click();

        // 3Ô∏è‚É£ –ñ–¥–µ–º, –ø–æ–∫–∞ –ø–æ–¥—Ç—è–Ω—É—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º
        const mainProduct = this.page.locator('[data-pw-product-title]', { hasText: productName });
        await expect(mainProduct).toBeVisible({ timeout: 10000 });

        console.log(`‚úÖ –í—ã–±—Ä–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: ${productName}`);
    }

    async getComponentsFromUI(): Promise<ManufactureComponent[]> {
        const rows = this.page.locator('[data-pw-product-title]');
        const count = await rows.count();
        const components: ManufactureComponent[] = [];

        for (let i = 0; i < count; i++) {
            const name = (await rows.nth(i).innerText()).trim();
            const amountText = (await this.page.locator('[data-pw-product-amount]').nth(i).innerText()).trim();
            const uom = (await this.page.locator('.uom-title').nth(i).innerText()).trim();

            const amount = parseFloat(amountText.replace(',', '.'));

            components.push({ name, amount, uom });
        }

        console.log("üì¶ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ UI:", components);
        return components;
    }

    async save() {
        await this.page.getByText("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å").click();
        await expect(this.page).toHaveURL(/\/storage-invoices\/manufacture$/);
    }

    async goToProductsPage(){
        await this.page.goto('/products');
        await expect(this.page.locator('nz-page-header-title')).toHaveText('–û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤');
    }


    async getProductAmountsByStorages(productName: string) {
        await this.goToProductsPage();
        const filterInput = this.page.locator('[data-pw-query-filter-input]');
        await filterInput.fill(productName);

        const productLink = this.page.getByRole('link', { name: productName, exact: true });
        await expect(productLink).toBeVisible({ timeout: 10000 });
        await productLink.click();

        const uomText = await this.page.locator('[data-pw-storage] [data-pw-storage-uom]').first().innerText();
        const uom = uomText.trim();

        const storages = this.page.locator('[data-pw-storage]');
        const result: Record<string, number> = {};
        const count = await storages.count();

        for (let i = 0; i < count; i++) {
            const storage = storages.nth(i);
            const name = (await storage.locator('[data-pw-storage-title]').innerText()).replace(':', '').trim();
            const amountText = await storage.locator('[data-pw-storage-amount]').innerText();
            const amount = parseInt(amountText.trim(), 10);
            if (!isNaN(amount)) {
                result[name] = amount;
            }
        }

        return { amounts: result, uom };
    }
}