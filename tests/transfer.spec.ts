import { test , expect} from "@playwright/test";
import {TransferPage} from "../pages/TransferPage";

function getConversionFactor(uom: string): number {
    const unitMap: Record<string, number> = {
        // –ï—Å–ª–∏ –≤–≤–æ–¥ –≤ UI - —ç—Ç–æ '–∫–≥', –∞ —Å–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–∏—Ç –≤ –≥—Ä–∞–º–º–∞—Ö, –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç = 1000.
        '–∫–≥': 1000,
        '–ª': 1000,
        '—à—Ç': 1,
    };

    return unitMap[uom.toLowerCase()] || 1;
}

test.describe('–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ', () => {
    test('–ù–æ–≤–æ–µ –ø–µ—Ä–µ–º–µ—à–µ–Ω–∏–µ', async ({page}) => {
        const transfer = new TransferPage(page);

        const productName = '–ó–∞–≥–æ—Ç–æ–≤–∫–∞ —è–≥–æ–¥–Ω—ã–π';
        const transferAmount = 3;

        const sourceStorage = '–°–∫–ª–∞–¥ –ú–∞–≥–∞–∑–∏–Ω';
        const destinationStorage = '–°–∫–ª–∞–¥ –ë–∞—Ä';


        await transfer.goToProductsPage();
        const initialData = await transfer.getProductAmountsByStorages(productName);

        const initialSourceAmount = initialData.amounts[sourceStorage];
        const initialDestinationAmount = initialData.amounts[destinationStorage];
        const uom = initialData.uom;


        const UNIT_CONVERSION_FACTOR = getConversionFactor(uom);

        // –†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3 * 1000 = 3000)
        const expectedChangeInSystemUnits = transferAmount * UNIT_CONVERSION_FACTOR;


        expect(initialSourceAmount, `ERROR: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Å–∫–ª–∞–¥–∞: ${sourceStorage}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–∫–∞—Ç–æ—Ä –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞.`).not.toBeUndefined();
        expect(initialDestinationAmount, `ERROR: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Å–∫–ª–∞–¥–∞: ${destinationStorage}`).not.toBeUndefined();

        await transfer.openList();
        await transfer.goToCreateForm();
        await transfer.selectInvoiceDate();

        await transfer.selectStorage(sourceStorage, 'storage-id');
        await transfer.selectStorage(destinationStorage, 'tostorage-id');

        await transfer.addProduct(productName, transferAmount);
        await transfer.save();


        // 3. –°–ë–û–† –ö–û–ù–ï–ß–ù–´–• –î–ê–ù–ù–´–•
        await transfer.goToProductsPage();
        // üö® –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–Ω–æ–≤–∞ –æ–∂–∏–¥–∞–µ–º –æ–±—ä–µ–∫—Ç { amounts, uom }
        const finalData = await transfer.getProductAmountsByStorages(productName);

        const finalSourceAmount = finalData.amounts[sourceStorage];
        const finalDestinationAmount = finalData.amounts[destinationStorage];


        console.log(`\n--- –ü–†–û–í–ï–†–ö–ê –û–°–¢–ê–¢–ö–û–í –¢–û–í–ê–†–ê "${productName}" ---`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–ª–∞–¥–∞-–∏—Å—Ç–æ—á–Ω–∏–∫–∞
        expect(finalSourceAmount, `–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ ${sourceStorage} –¥–æ–ª–∂–µ–Ω —É–º–µ–Ω—å—à–∏—Ç—å—Å—è`).toBe(initialSourceAmount - transferAmount);
        console.log(`‚úÖ ${sourceStorage}: –ë—ã–ª–æ ${initialSourceAmount}, —Å—Ç–∞–ª–æ ${finalSourceAmount}. –£–º–µ–Ω—å—à–µ–Ω–∏–µ –Ω–∞ ${transferAmount} OK.`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–ª–∞–¥–∞-–ø–æ–ª—É—á–∞—Ç–µ–ª—è
        expect(finalDestinationAmount, `–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ ${destinationStorage} –¥–æ–ª–∂–µ–Ω —É–≤–µ–ª–∏—á–∏—Ç—å—Å—è`).toBe(initialDestinationAmount + transferAmount);
        console.log(`‚úÖ ${destinationStorage}: –ë—ã–ª–æ ${initialDestinationAmount}, —Å—Ç–∞–ª–æ ${finalDestinationAmount}. –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞ ${transferAmount} OK.`);

        console.log('--- –ü–†–û–í–ï–†–ö–ê –¢–†–ê–ù–°–§–ï–†–ê –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê ---\n');




    })
})